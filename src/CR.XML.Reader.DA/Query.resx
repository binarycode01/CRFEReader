<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="BetweenDates" xml:space="preserve">
    <value>select min(FechaEmision) as FechaMinima,  max(FechaEmision) as FechaMaxima from Cabecera</value>
  </data>
  <data name="ExportExpensesHeader" xml:space="preserve">
    <value>select 
	C.Tipo,
	C.Clave,
	C.NumeroConsecutivo,
	C.CodigoActividad,
	C.FechaEmision,
	C.EmisorNombre,
	C.EmisorIdentificacionTipo,
	C.EmisorIdentificacionNumero,
	C.EmisorNombreComercial,
	C.EmisorUbicacionProvincia,
	C.EmisorUbicacionCanton,
	C.EmisorUbicacionDistrito,
	C.EmisorUbicacionBarrio,
	C.EmisorUbicacionOtrasSenas,
	C.EmisorTelefonoCodigoPais,
	C.EmisorTelefonoNumTelefono,
	C.EmisorCorreoElectronico,
	C.ReceptorNombre,
	C.ReceptorIdentificacionTipo,
	C.ReceptorIdentificacionNumero,
	C.ReceptorIdentificacionExtranjero,
	C.ReceptorNombreComercial,
	C.ReceptorUbicacionProvincia,
	C.ReceptorUbicacionCanton,
	C.ReceptorUbicacionDistrito,
	C.ReceptorUbicacionBarrio,
	C.ReceptorUbicacionOtrasSenas,
	C.ReceptorTelefonoCodigoPais,
	C.ReceptorTelefonoNumTelefono,
	C.ReceptorCorreoElectronico,
	C.PlazoCredito,
	C.CondicionVenta,
	R.CodigoTipoMoneda,
	R.TipoCambio,
	cast(R.TotalServExonerado as Real) as TotalServExonerado,
	cast(R.TotalServExentos as Real) as TotalServExentos,
	cast(R.TotalMercanciasGravadas as Real) as TotalMercanciasGravadas,
	cast(R.TotalMercanciasExentas as Real) as TotalMercanciasExentas,
	cast(R.TotalMercExonerada as Real) as TotalMercExonerada,
	cast(R.TotalGravado as Real) as TotalGravado,
	cast(R.TotalExento as Real) as TotalExento,
	cast(R.TotalExonerado as Real) as TotalExonerado,
	cast(R.TotalVenta as Real) as TotalVenta,
	cast (R.TotalImpuesto as Real) as TotalImpuesto,
	cast(R.TotalIVADevuelto as Real) as TotalIVADevuelto,
	cast(R.TotalOtrosCargos as Real) as TotalOtrosCargos,
	cast(R.TotalComprobante as Real) as TotalComprobante
from 
	Cabecera  as C
inner join 
	Resumen as R
on 
	C.Clave = R.Clave
where 
	C.ReceptorIdentificacionNumero = @Id and 
	C.FechaEmision &gt;= @startDate and 
	C.FechaEmision &lt;= @endDate</value>
  </data>
  <data name="ExportExpensesTaxes" xml:space="preserve">
    <value>select 
	DI.Clave, DI.Codigo, DI.Tarifa,  cast( sum(DI.Monto) as Real) as Total 
from 
	DetalleImpuesto as DI 
INNER JOIN	
	Cabecera as C
on 
	DI.Clave = C.Clave
WHERE 
	C.ReceptorIdentificacionNumero = @Id AND
	C.FechaEmision &gt;= @startDate and 
	cast(c.FechaEmision as date) &lt;= @endDate
	
group by 
	DI.Clave, DI.CodigoTarifa</value>
  </data>
  <data name="ExportSalesHeader" xml:space="preserve">
    <value>select 
	C.Tipo,
	C.Clave,
	C.NumeroConsecutivo,
	C.CodigoActividad,
	C.FechaEmision,
	C.EmisorNombre,
	C.EmisorIdentificacionTipo,
	C.EmisorIdentificacionNumero,
	C.EmisorNombreComercial,
	C.EmisorUbicacionProvincia,
	C.EmisorUbicacionCanton,
	C.EmisorUbicacionDistrito,
	C.EmisorUbicacionBarrio,
	C.EmisorUbicacionOtrasSenas,
	C.EmisorTelefonoCodigoPais,
	C.EmisorTelefonoNumTelefono,
	C.EmisorCorreoElectronico,
	C.ReceptorNombre,
	C.ReceptorIdentificacionTipo,
	C.ReceptorIdentificacionNumero,
	C.ReceptorIdentificacionExtranjero,
	C.ReceptorNombreComercial,
	C.ReceptorUbicacionProvincia,
	C.ReceptorUbicacionCanton,
	C.ReceptorUbicacionDistrito,
	C.ReceptorUbicacionBarrio,
	C.ReceptorUbicacionOtrasSenas,
	C.ReceptorTelefonoCodigoPais,
	C.ReceptorTelefonoNumTelefono,
	C.ReceptorCorreoElectronico,
	C.PlazoCredito,
	C.CondicionVenta,
	R.CodigoTipoMoneda,
	R.TipoCambio,
	cast(R.TotalServExonerado as Real) as TotalServExonerado,
	cast(R.TotalServExentos as Real) as TotalServExentos,
	cast(R.TotalMercanciasGravadas as Real) as TotalMercanciasGravadas,
	cast(R.TotalMercanciasExentas as Real) as TotalMercanciasExentas,
	cast(R.TotalMercExonerada as Real) as TotalMercExonerada,
	cast(R.TotalGravado as Real) as TotalGravado,
	cast(R.TotalExento as Real) as TotalExento,
	cast(R.TotalExonerado as Real) as TotalExonerado,
	cast(R.TotalVenta as Real) as TotalVenta,
	cast (R.TotalImpuesto as Real) as TotalImpuesto,
	cast(R.TotalIVADevuelto as Real) as TotalIVADevuelto,
	cast(R.TotalOtrosCargos as Real) as TotalOtrosCargos,
	cast(R.TotalComprobante as Real) as TotalComprobante
from 
	Cabecera  as C
inner join 
	Resumen as R
on 
	C.Clave = R.Clave
where 
	C.EmisorIdentificacionNumero = @Id and 
	C.FechaEmision &gt;= @startDate and 
	cast(C.FechaEmision as date) &lt;= @endDate</value>
  </data>
  <data name="ExportSalesTaxes" xml:space="preserve">
    <value>select 
	DI.Clave, DI.Codigo, DI.Tarifa,  cast( sum(DI.Monto) as Real) as Total 
from 
	DetalleImpuesto as DI 
INNER JOIN	
	Cabecera as C
on 
	DI.Clave = C.Clave
WHERE 
	C.EmisorIdentificacionNumero = @Id AND
	C.FechaEmision &gt;= @startDate and 
	c.FechaEmision &lt;= @endDate
	
group by 
	DI.Clave, DI.CodigoTarifa</value>
  </data>
  <data name="GetAllCompanies" xml:space="preserve">
    <value>select 
	Identification, Identification || " - " || Name as Name, Quantity 
from 
(
	select  
		EmisorIdentificacionNumero as Identification, max(EmisorNombre)  as Name, count(1) as Quantity
	from 
		Cabecera
	group by 	
		EmisorIdentificacionNumero
	UNION
	select 
		ReceptorIdentificacionNumero as Identification, max( ReceptorNombre) as Name, count(1) as Quantity
	from 
		Cabecera
	group by 	
		ReceptorIdentificacionNumero
) as X
order by 3 desc</value>
  </data>
  <data name="InsertDocument" xml:space="preserve">
    <value>insert into
 {0}  
values 
(
 @Clave, 
 @NumeroConsecutivo, 
 @CodigoActividad, 
 @FechaEmision, 
 @EmisorNombre, 
 @EmisorIdentificacionTipo, 
 @EmisorIdentificacionNumero, 
 @EmisorNombreComercial,
 @EmisorUbicacionProvincia,
    @EmisorUbicacionCanton, 
 @EmisorUbicacionDistrito, 
 @EmisorUbicacionBarrio,
    @EmisorUbicacionOtrasSenas, @EmisorTelefonoCodigoPais, @EmisorTelefonoNumTelefono, @EmisorCorreoElectronico,
 @ReceptorNombre, 
 @ReceptorIdentificacionTipo, 
 @ReceptorIdentificacionNumero, 
 @ReceptorIdentificacionExtranjero, 
 @ReceptorNombreComercial, 
 @ReceptorUbicacionProvincia, 
 @ReceptorUbicacionCanton, 
 @ReceptorUbicacionDistrito, 
 @ReceptorUbicacionBarrio, 
 @ReceptorUbicacionOtrasSenas, @ReceptorTelefonoCodigoPais, @ReceptorTelefonoNumTelefono, @ReceptorCorreoElectronico,
 @CondicionVenta, 
 @PlazoCredito
)</value>
  </data>
  <data name="InsertDocumentComercialCode" xml:space="preserve">
    <value>Insert into {0}DetalleCodigoComercial 
Values
(
 @Clave,
 @NumeroLinea,
 @Tipo,
 @Codigo
)
</value>
  </data>
  <data name="InsertDocumentDetail" xml:space="preserve">
    <value>Insert  into 
 {0}Detalle 
Values(
 @Clave,
 @NumeroLinea,
 @Codigo, @Cantidad,
 @UnidadMedida,
 @UnidadMedidaComercial,
 @Detalle,
 @PrecioUnitario,
 @MontoTotal,
 @SubTotal,
 @BaseImponible,
 @ImpuestoNeto,
 @MontoTotalLinea
)</value>
  </data>
  <data name="InsertDocumentDiscount" xml:space="preserve">
    <value>Insert into 
 {0}Descuento
Values 
(
 @Clave,
 @NumeroLinea,
 @MontoDescuento,
 @NaturalezaDescuento
)</value>
  </data>
  <data name="InsertDocumentOtherCharges" xml:space="preserve">
    <value>Insert into {0}OtrosCargos
Values
(
 @Clave,
 @TipoDocumento,
 @NumeroIdentidadTercero,
 @NombreTercero,
 @Detalle,
 @Porcentaje,
 @MontoCargo
)</value>
  </data>
  <data name="InsertDocumentOtherContent" xml:space="preserve">
    <value>insert into 
 {0}OtroContenido 
Values 
(
 @Clave,
 @Any,
 @codigo
)</value>
  </data>
  <data name="InsertDocumentOtherText" xml:space="preserve">
    <value>insert into 
 {0}OtrosTexto 
Values
(
 @Clave,
 @Codigo,
 @Value
)</value>
  </data>
  <data name="InsertDocumentPaymentMethod" xml:space="preserve">
    <value>Insert into 
 {0}MedioPago
Values 
 (@Clave, @MedioPago)</value>
  </data>
  <data name="InsertDocumentReferences" xml:space="preserve">
    <value>Insert into 
 {0}InformacionReferencia 
Values
(
 @Clave,
 @TipoDoc,
 @Numero,
 @FechaEmision,
 @Codigo,
 @Razon
)</value>
  </data>
  <data name="InsertDocumentTaxDetail" xml:space="preserve">
    <value>Insert into 
 {0}Impuesto 

Values 
(
 @Clave,
 @NumeroLinea,
 @Codigo,
 @CodigoTarifa,
 @Tarifa,
 @FactorIVA,
 @Monto,
 @ExoneracionTipoDocumento,
 @ExoneracionNumeroDocumento,
 @ExoneracionNombreInstitucion,
 @ExoneracionFechaEmision,
 @ExoneracionPorcentaje,
 @ExoneracionMonto
)</value>
  </data>
  <data name="InsertDocumentTotals" xml:space="preserve">
    <value>Insert into 
 {0}Resumen 
Values 
(
 @Clave,
 @CodigoTipoMoneda, @TipoCambio,
 @TotalServGravados,
 @TotalServExentos,
 @TotalServExonerado,
 @TotalMercanciasGravadas,
 @TotalMercanciasExentas,
 @TotalMercExonerada,
 @TotalGravado,
 @TotalExento,
 @TotalExonerado,
 @TotalVenta,
 @TotalDescuentos,
 @TotalVentaNeta,
 @TotalImpuesto,
 @TotalIVADevuelto,
 @TotalOtrosCargos,
 @TotalComprobante
)</value>
  </data>
  <data name="TotalCompanies" xml:space="preserve">
    <value>select count( Distinct EmisorIdentificacionNumero) as Cantidad from Cabecera</value>
  </data>
  <data name="TotalDocuments" xml:space="preserve">
    <value>select count(1) as Cantidad from Cabecera</value>
  </data>
</root>